// vite.config.ts
import react from "file:///E:/Users/lenovo/Documents/FantasyVideo/FantasyVideo/node_modules/@vitejs/plugin-react/dist/index.mjs";
import { resolve } from "path";

// src/utils/vite.ts
import dotenv from "file:///E:/Users/lenovo/Documents/FantasyVideo/FantasyVideo/node_modules/dotenv/lib/main.js";
function loadEnv(mode) {
  const ret = {};
  const envList = [`.env.${mode}.local`, `.env.${mode}`, ".env.local", ".env"];
  envList.forEach((e) => {
    dotenv.config({ path: e });
  });
  for (const envName of Object.keys(process.env)) {
    let realName = process.env[envName].replace(/\\n/g, "\n");
    realName = realName === "true" ? true : realName === "false" ? false : realName;
    if (envName === "VITE_PORT")
      realName = Number(realName);
    if (envName === "VITE_OPEN")
      realName = Boolean(realName);
    if (envName === "VITE_PROXY") {
      try {
        realName = JSON.parse(realName);
      } catch (error) {
        realName = "";
      }
    }
    ret[envName] = realName;
    if (typeof realName === "string") {
      process.env[envName] = realName;
    } else if (typeof realName === "object") {
      process.env[envName] = JSON.stringify(realName);
    }
  }
  return ret;
}

// vite.config.ts
var __vite_injected_original_dirname = "E:\\Users\\lenovo\\Documents\\FantasyVideo\\FantasyVideo";
var pathResolve = (dir) => {
  return resolve(__vite_injected_original_dirname, ".", dir);
};
var viteConfig = ({ mode }) => {
  const { VITE_PORT, VITE_OPEN, VITE_BASE_PATH, VITE_OUT_DIR, VITE_PROXY_URL } = loadEnv(mode);
  const alias = {
    "/@": pathResolve("./src/"),
    assets: pathResolve("./src/assets")
  };
  let proxy = {};
  if (VITE_PROXY_URL) {
    proxy = {
      "/api": {
        target: VITE_PROXY_URL,
        changeOrigin: true
      },
      "/public": {
        target: VITE_PROXY_URL,
        changeOrigin: true
      },
      "/storage": {
        target: VITE_PROXY_URL,
        changeOrigin: true
      }
    };
  }
  return {
    plugins: [react()],
    root: process.cwd(),
    resolve: { alias },
    base: VITE_BASE_PATH,
    server: {
      host: "0.0.0.0",
      port: VITE_PORT,
      open: VITE_OPEN,
      proxy
    },
    css: {
      postcss: {
        plugins: [
          {
            postcssPlugin: "internal:charset-removal",
            AtRule: {
              charset: (atRule) => {
                if (atRule.name === "charset") {
                  atRule.remove();
                }
              }
            }
          }
        ]
      },
      preprocessorOptions: {
        less: {
          javascriptEnabled: true,
          charset: false,
          modifyVars: {
            "@font-size-base": "16px",
            "@primary-color": "#1a7edb",
            "@layout-header-background": "#1a7edb",
            "@menu-highlight-color": "#000000",
            "@menu-item-active-bg": "#1a7edb"
          }
        }
      }
    }
  };
};
var vite_config_default = viteConfig;
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
